    - name: HERMES station-api backend software

      block:

        - name: HERMES API - Download HERMES station-api from github
          become: true
          git:
            repo: "git://github.com/DigitalHERMES/station-api.git"
            clone: yes
            dest: "{{ webpub_path }}/station-api"
            version: HEAD
            force: yes

        - name: HERMES API - setting permissions 
          become: true
          ansible.builtin.file:
            path: "{{ webpub_path }}/station-api"
            recurse: yes
            owner: hermes
            group: www-data
            mode: '0775'

        - name: HERMES API - Create a symbolic link for public html
          ansible.builtin.file:
            src: "{{ webpub_path }}/station-api/public"
            dest: "{{ webpub_path }}/html/api"
            owner: hermes
            group: www-data
            state: link

        - name: HERMES API - composer install
          command: "composer install"
          args:
            chdir: "{{ webpub_path }}/station-api"

        - name: HERMES API - check for .env
          stat:
            path: "{{ webpub_path }}/station-api/.env"
          register: api_env

        - name: HERMES API - .env exist?
          when: not api_env.stat.exists
          block: 
          - name: HERMES API - copy .env from .env.example 
            become: true
            command: "cp .env.example .env"
            args:
              chdir: "{{ webpub_path }}/station-api/"

        - name: HERMES API - copy  .env from template
          when: not api_env.stat.exists
          become: true
          command: "cp .env.example .env"
          args:
            chdir: "{{ webpub_path }}/station-api/"

        - name: HERMES API - gen app key
          when: not api_env.stat.exists
          shell: "date | openssl passwd -6 -stdin "
          register: app_key
        
        - name: HERMES API - setting .env APP_KEY
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^APP_KEY='
            line: "APP_KEY= {{ app_key.stdout }}"

        - name: HERMES API - setting .env HERMES_INBOX with {{ inbox_path }}
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^HERMES_INBOX='
            line: "HERMES_INBOX={{ inbox_path }}"

        - name: HERMES API - setting .env HERMES_INBOX with {{ ubitx_client }}
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path}}/.env"
            regexp: '^HERMES_TOOL='
            line: "HERMES_TOOL={{ ubitx_client }}"

        - name: HERMES API - setting .env DB_CONNECTION with mysql
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^DB_CONNECTION='
            line: "DB_CONNECTION=mysql"

        - name: HERMES API - setting .env DB_DATABASE 
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^DB_DATABASE='
            line: "DB_DATABASE={{ hermes_db }}"

        - name: HERMES API - setting .env DB_USERNAME
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^DB_USERNAME='
            line: "DB_USERNAME={{ hermes_db_user }}"

        - name: HERMES API - setting .env DB_PASSWORD
          when: not api_env.stat.exists
          ansible.builtin.lineinfile:
            path: "{{ webapi_path }}/.env"
            regexp: '^DB_DB_PASSWORD='
            line: "DB_DB_PASSWORD={{ hermes_db_password }}"

        - name: HERMES API - create database
          become: true
          community.mysql.mysql_db:
            login_unix_socket: /var/run/mysqld/mysqld.sock
            name: hermes
            state: present      

        - name: HERMES API - create database user
          become: true
          community.mysql.mysql_user:
            login_unix_socket: /var/run/mysqld/mysqld.sock
            name: "{{ hermes_db_user }}"
            password: "{{ hermes_db_password }}"
            priv: "{{ hermes_db }}.*:ALL"
            state: present

        - name: HERMES API - create database tables
          command: "php artisan migrate:refresh"
          args:
            chdir: "{{ webpub_path }}/station-api/"
                
        - name: HERMES API - populate database tables
          command: "php artisan db:seed"
          args:
            chdir: "{{ webpub_path }}/station-api/"
                
        - name: HERMES API - create user admin TODO 
          command: echo TODO
          args:
            chdir: "{{ webpub_path }}/station-api/"