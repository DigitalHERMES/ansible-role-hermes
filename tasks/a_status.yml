- name: general status
  block:
    - name: Radio ubitx get frequency
      command: "ubitx_client -c get_frequency"
      register: ubitx_frequency
      #failed_when: "'ERROR' in ubitx_frequency.stdout_lines"

    - name: isp admin
      wait_for: host=localhost port=8080
      register: isp_status
      failed_when:  isp_status.state != 'started'

    - name: webserver localhost status 
      wait_for: host=localhost port=443
      register: webserver_local_status 

    - name: webserver wifi status 
      wait_for: host=10.0.0.1 port=443
      timeout: 1
      register: webserver_local_status 
      ignore_errors: yes

    - name: uucp local status  is started?
      wait_for: host=localhost port=540
      register: webserver_local_status 

    - name: get json api/sys/status from station-api on localhost
      ansible.builtin.uri:
        validate_certs: no
        url: https://localhost/api/sys/status
      register: apistatus
      #failed_when: apistatus.json.status == false

    - name: check if domainname from /etc/mailname matches api domain
      ansible.builtin.command: cat /etc/mailname
      register: etcmailname
      failed_when: apistatus.json.domain != etcmailname.stdout

    - name: check if nodename from uucp matches api 
      ansible.builtin.shell: cat /etc/uucp/config | grep nodename | cut -d " " -f 2
      register: nodename
      failed_when: apistatus.json.nodename != nodename.stdout

    - name: check if uucp is version  >1.07
      ansible.builtin.shell: /sbin/uucico -v | grep uucico | cut -d " " -f 4
      register: uucp_version
      failed_when: uucp_version.stdout|float < 1.07

    - name: uucp handshake for alias gw
      ansible.builtin.command: /sbin/uucico -S gw
      timeout: 5
      ignore_errors: yes

    - name: uucp handshake for alias local
      ansible.builtin.command: /sbin/uucico -S local
      timeout: 5
      ignore_errors: yes

    #- name: uucp handshake for local
      #tags:  
        #- dev
      #ansible.builtin.command: /sbin/uucico -S 'gw!hermes.radio'